 //to be able to do scroll down
        //you have 2 option
            //1.actions move to the element
        //need to create an object from actions
        Actions actions=new Actions(DriverUtil.getDriver());
        actions.moveToElement(ifreme).perform();

            //2.JS excuter

        JavascriptExecutor javascriptExecutor=(JavascriptExecutor) DriverUtil.getDriver();
        //to make jsexecuter works you need to do casting between driver and jsexcuter

        BrowserUtils.wait(3);
        javascriptExecutor.executeScript("arguments[0].scrollIntoView(true);",ifreme);


Either for actions or jsexcuter first you need to create connection the place that they are going to work which is driver
    in actions class created with constracturor and it has webdriver so you can pass
            Actions actions=new Actions(DriverUtil.getDriver());

   in jsexcuter since it has no constractor to make jsexcuter to understand where is going to be connect which is driver
   //you need to cast with driver
           JavascriptExecutor javascriptExecutor=(JavascriptExecutor) DriverUtil.getDriver();



WEBDRIVERWAIT CLASS (Explicit Wait) Total 20
	-> We use explicit wait If we are waiting for some specific webelement or action to happen.
	- This will wait upto given seconds like implicit wait.(if condition happens on the third second wait will wait for 3 second)
	(it wont wait whole time to get finish it will only wait until condition gets true)
	- After 20 It will throw TimeOutException if condition not happens

Examples :
alertIsPresent()
elementSelectionStateToBe()
elementToBeClickable()
elementToBeSelected()
frameToBeAvaliableAndSwitchToIt()
invisibilityOfTheElementLocated()
invisibilityOfElementWithText()
presenceOfAllElementsLocatedBy()
presenceOfElementLocated()
textToBePresentInElement()
textToBePresentInElementLocated()
textToBePresentInElementValue()
titleIs()
titleContains()
visibilityOf()
visibilityOfAllElements()
visibilityOfAllElementsLocatedBy()
visibilityOfElementLocated()



What Is TestNG.Xml?
TestNG.xml file is a configuration file that helps in organizing our tests.
It allows testers to create and handle multiple test classes, define test suites and tests.

It makes a tester’s job easier by controlling the execution of tests by putting all the test cases together
and run it under one XML file. This is a beautiful concept, without which, it is difficult to work in TestNG.

Advantages Of TestNG.xml
Major advantages of TestNG.xml file are:

It provides parallel execution of test methods.
It allows the dependency of one test method on another test method.
It helps in prioritizing our test methods.
It allows grouping of test methods into test groups.
It has different types of HTML reports, Extent reports, etc. for a better and clear understanding of our test summary.
It has listeners who help in creating logs.

Concepts Used In TestNG.xml
#1) A Suite is represented by one XML file. It can contain one or more tests and is defined by the <suite> tag.

Example: <suite name=”Testing Google Apps”>

#2) A Test is represented by <test> and can contain one or more TestNG classes.

Example: <test name=”Regression”>

#3) A Class is a Java class that contains TestNG annotations. Here it is represented by the <class> tag and can contain one or more test methods.

Example

<classes>
<class name="Googletest.GmailTest"/>
<class name="Googletest.MapsTest"/>
<class name="Googletest.ImagesTest"/>
</classes>
